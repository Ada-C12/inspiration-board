{"version":3,"sources":["components/Card.js","components/NewCardForm.js","components/Board.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","onDeleteCard","props","deleteCardCallback","id","className","this","text","emoji","getUnicode","type","onClick","Component","EMOJI_LIST","NewCardForm","onFieldChange","event","setState","target","name","value","onFormSubmit","preventDefault","newCard","state","addCardCallback","map","emojiName","i","key","onSubmit","htmlFor","onChange","makeEmojis","Board","deleteCard","targetId","axios","delete","url","then","response","updatedData","cards","filter","item","card","error","catch","message","addCard","post","boardName","push","data","get","makeCards","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.aa0446e0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport './Card.css';\n\nclass Card extends Component {\n\n  onDeleteCard = () => {\n    this.props.deleteCardCallback(this.props.id);\n  }\n\n  render() {\n    return (\n      <div className=\"card\">\n        <div className=\"card__content\">\n          { this.props.text ? \n            <span className=\"card__content-text\">\n              { this.props.text }\n            </span>\n            :\n            ''\n          }\n          { this.props.emoji ?\n            <span className=\"card__content-emoji\">\n              { emoji.getUnicode(this.props.emoji) }\n            </span>\n            :\n            ''\n          }\n        </div>\n        <button \n          type=\"button\"\n          onClick={this.onDeleteCard}\n          className=\"card__delete\"\n        >Delete Card</button>\n      </div>\n    )\n  }\n}\n\nCard.propTypes = {\n  key: PropTypes.number.isRequired,\n  text: PropTypes.string,\n  emoji: PropTypes.string,\n  deleteCardCallback: PropTypes.func.isRequired,\n};\n\nexport default Card;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport './NewCardForm.css';\n\nconst EMOJI_LIST = [\"\", \"heart_eyes\", \"beer\", \"clap\", \"sparkling_heart\", \"heart_eyes_cat\", \"dog\"]\n\nclass NewCardForm extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      text: '',\n      emoji: ''\n    }\n  }\n\n  onFieldChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    })\n  }\n\n  onFormSubmit = (event) => {\n    event.preventDefault();\n\n    const newCard = {\n      text: this.state.text,\n      emoji: this.state.emoji\n    };\n\n    this.setState({\n      text: '',\n      emoji: ''\n    });\n\n    this.props.addCardCallback(newCard);\n  }\n\n  makeEmojis () {\n    const availableEmojis = EMOJI_LIST.map((emojiName, i) => {\n      return (\n        <option key={i} value={emojiName}>\n        { emoji.getUnicode(emojiName)}\n        </option>\n      );\n    });\n    return availableEmojis\n  }\n\n  render() {\n    return (\n      <form className=\"new-card-form\" onSubmit={this.onFormSubmit}>\n        <h2 className=\"new-card-form__header\">Write New Message</h2>\n        <div className=\"new-card-form__form\">\n          <div>\n            <label \n              htmlFor=\"text\"\n              className=\"new-card-form__form-label\"\n            >Message:</label>\n            <input \n              name=\"text\"\n              onChange={this.onFieldChange}\n              className=\"new-card-form__form-textarea\"\n            />\n          </div>\n          <div>\n            <label \n              htmlFor=\"emoji\"\n              className=\"new-card-form__form-label\"\n            >Emoji:</label>\n            <select \n              name=\"emoji\"\n              onChange={this.onFieldChange}\n              className=\"new-card-form__form-select\"\n            >\n              { this.makeEmojis() }\n            </select>\n          </div>\n        </div>\n        <br></br>\n        <input\n          type=\"submit\"\n          value=\"Add\"\n          className=\"new-card-form__form-button\"\n        />\n      </form>\n    );\n  }\n}\n\nNewCardForm.propTypes = {\n  addCardCallback: PropTypes.func.isRequired,\n}\n\nexport default NewCardForm;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport './Board.css';\nimport Card from './Card';\nimport NewCardForm from './NewCardForm';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cards: [],\n      error: '',\n    }\n  }\n\n  makeCards () {\n    const boardCards = this.state.cards.map((item, i) => {\n      return <Card\n        key={i}\n        id={item.card.id}\n        text={item.card.text}\n        emoji={item.card.emoji}\n        deleteCardCallback={this.deleteCard}\n      />;\n    });\n    return boardCards\n  }\n\n  componentDidMount() {\n    axios.get(`${this.props.url}/boards/${this.props.boardName}/cards`)\n      .then((response) => {\n        this.setState({ cards: response.data });\n      })\n      .catch((error) => {\n        this.setState({ error: error.message });\n      });\n  }\n\n  deleteCard = (targetId) => {\n    axios.delete(`${this.props.url}/cards/${targetId}`)\n      .then((response) => {\n        const updatedData = this.state.cards.filter(\n          (item) => item.card.id !== targetId\n        );\n        this.setState({\n          cards: updatedData,\n          error: ''\n        });\n      })\n      .catch((error) => {\n        this.setState({\n          error: error.message\n        });\n      }); \n  }\n\n  addCard = (card) => {\n    axios.post(`${this.props.url}/boards/${this.props.boardName}/cards`, card)\n      .then((response) => {\n        const updatedData = this.state.cards;\n        updatedData.push(response.data);\n        this.setState({\n          cards: updatedData,\n          error: ''\n        });\n      })\n      .catch((error) => {\n        this.setState({\n          error: error.message\n        });\n      }); \n  }\n\n  render() {\n    return (\n      <div>\n        { this.state.error === ''?\n          <div className=\"board\">\n            { this.makeCards() }\n          </div>\n          :\n          <div className=\"validation-errors-display validation-errors-display__list\">\n            { this.state.error }\n          </div>\n        }\n        <NewCardForm addCardCallback={this.addCard}/>\n      </div>\n    )\n  }\n}\n\nBoard.propTypes = {\n  url: PropTypes.string.isRequired,\n  boardName: PropTypes.string.isRequired\n};\n\nexport default Board;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\n\nclass App extends Component {\n  render() {\n    return (\n      <section>\n        <header className=\"header\">\n          <h1 className=\"header__h1\"><span className=\"header__text\">Inspiration Board</span></h1>\n        </header>\n        <Board\n          url=\"https://inspiration-board.herokuapp.com\"\n          boardName={`feisty-phoenix`}\n          />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}